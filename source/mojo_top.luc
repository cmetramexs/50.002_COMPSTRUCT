module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy       // AVR RX buffer full
  ) {
  
 sig rst;                  // reset signal
    
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    fsm state = {IDLE, ONEPLAYER, TWOPLAYER,
                P2TURN2P, P1TURN2P, WIN2P,
                BOTTURN1P, P1TURN1P, BOTMISS1P, WIN1P};  // Other test cases
      
    dff inp_a[16];  // to store input of a
    dff inp_b[16];  // to store input of b
    
    .rst(rst){
      
    }
    dff counter[27];
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    case(state.q){
      state.IDLE:
      
      state.TWOPLAYER:
     
      state.ONEPLAYER:
      
      
      //2P States
      state.P2TURN2P:
      
      state.P1TURN1P:
      
      state.WIN2P:
      
      //1P States
      state.BOTTURN1P:
      
      state.BOTMISS1P:
      
      state.P1TURN1P:
      
      state.WIN1P:
      
    }
    
  }
}