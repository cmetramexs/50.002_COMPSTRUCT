/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input mode_dip,
    input p1_button,
    input p2_button,
    output reg [2:0] p1_led,
    output reg [2:0] p2_led,
    output reg [15:0] led_line
  );
  
  
  
  integer p1_input;
  
  integer p2_input;
  
  integer [17:0] ball_pos;
  
  integer shift;
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam IDLE_state = 4'd0;
  localparam ONEPLAYER_state = 4'd1;
  localparam TWOPLAYER_state = 4'd2;
  localparam P2TURN2P_state = 4'd3;
  localparam P1TURN2P_state = 4'd4;
  localparam END2P_state = 4'd5;
  localparam BOTTURN1P_state = 4'd6;
  localparam P1TURN1P_state = 4'd7;
  localparam BOTMISS1P_state = 4'd8;
  localparam END1P_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  wire [8-1:0] M_p1_counter_count;
  reg [1-1:0] M_p1_counter_button;
  counter_2 p1_counter (
    .clk(clk),
    .rst(rst),
    .button(M_p1_counter_button),
    .count(M_p1_counter_count)
  );
  wire [8-1:0] M_p2_counter_count;
  reg [1-1:0] M_p2_counter_button;
  counter_2 p2_counter (
    .clk(clk),
    .rst(rst),
    .button(M_p2_counter_button),
    .count(M_p2_counter_count)
  );
  reg [4:0] M_change_spd_d, M_change_spd_q = 1'h0;
  reg [11:0] M_ball_spd5_d, M_ball_spd5_q = 1'h0;
  reg [13:0] M_ball_spd4_d, M_ball_spd4_q = 1'h0;
  reg [15:0] M_ball_spd3_d, M_ball_spd3_q = 1'h0;
  reg [19:0] M_ball_spd2_d, M_ball_spd2_q = 1'h0;
  reg [23:0] M_ball_spd1_d, M_ball_spd1_q = 1'h0;
  
  localparam P1SAFEZONE = 16'he000;
  
  localparam P2SAFEZONE = 16'h0007;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_p1_counter_button = ~p1_button;
    p1_input = M_p1_counter_count;
    M_p2_counter_button = ~p2_button;
    p2_input = M_p2_counter_count;
    p1_led = 3'h7;
    p2_led = 3'h7;
    ball_pos = 16'h0001;
    led_line = ball_pos[1+15-:16];
    shift = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        if (mode_dip == 1'h1) begin
          M_state_d = TWOPLAYER_state;
        end else begin
          M_state_d = ONEPLAYER_state;
        end
      end
      TWOPLAYER_state: begin
        if (p1_button == 1'h1) begin
          M_state_d = P1TURN2P_state;
        end
      end
      ONEPLAYER_state: begin
        if (p1_button == 1'h1) begin
          M_state_d = P1TURN1P_state;
        end
      end
      P1TURN2P_state: begin
        if (ball_pos & 16'he000) begin
          if (p1_input == 1'h1) begin
            shift = shift + 1'h1;
            M_state_d = P2TURN2P_state;
          end
        end else begin
          if (p1_input == 1'h1) begin
            M_state_d = END2P_state;
          end
        end
      end
      P2TURN2P_state: begin
        if (ball_pos & 16'h0007) begin
          if (p2_input == 1'h1) begin
            shift = shift + 1'h1;
            M_state_d = P1TURN2P_state;
          end
        end else begin
          if (p2_input == 1'h1) begin
            M_state_d = END2P_state;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_change_spd_q <= M_change_spd_d;
    M_ball_spd5_q <= M_ball_spd5_d;
    M_ball_spd4_q <= M_ball_spd4_d;
    M_ball_spd3_q <= M_ball_spd3_d;
    M_ball_spd2_q <= M_ball_spd2_d;
    M_ball_spd1_q <= M_ball_spd1_d;
    M_state_q <= M_state_d;
  end
  
endmodule
